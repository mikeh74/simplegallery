{"mappings":"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","sources":["<anon>","src/gallery.js","src/gallery.mjs"],"sourcesContent":["(() => {\n/**\n * Renders an image using a template\n *\n * @param {number} imageIndex index to identify the image by\n * @param {string} imageUrl the url for the image\n * @param {string} imageAlt the alt attribute for the image\n * @param {string} imageCaption a caption to display under the image\n * @param {string} youtubeId optional youtube id\n * @return {string}\n */ const $7289923abbc3a0b5$var$renderImage = (imageIndex, imageUrl, imageAlt, imageCaption, youtubeId = null)=>{\n    let y = '';\n    let x = '';\n    /**\n   * If the image has a youtube id then we need to add some extra\n   * markup to the image\n   */ if (youtubeId !== null) {\n        y = `data-youtubeid=\"${youtubeId}\"`;\n        x = `<div class=\"simple-gallery-play-icon\">\n          <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path class=\"simple-gallery-play-icon-circle\" d=\"M 105 55 C 105 27.385765 82.614235 5 55 5 C 27.385763 5 5 27.385765 5 55 C 5 82.614235 27.385763 105 55 105 C 82.614235 105 105 82.614235 105 55 Z\"/>\n              <path class=\"simple-gallery-play-icon-triangle\" d=\"M 81.5 55.122868 L 41.5 32.028854 L 41.5 78.216881 Z\"/>\n          </svg>\n        </div>`;\n    }\n    return `\n    <li class=\"simple-gallery-item\" data-imagekey=\"${imageIndex}\" ${y}>\n      <figure>\n        <div class=\"simple-gallery-image-wrapper\">\n        <img src=\"${imageUrl}\" alt=\"${imageAlt}\">\n        ${x}\n        </div>\n        <figcaption>${imageCaption}</figcaption>\n      </figure>\n    </li>`;\n};\n/**\n * Takes and array of images and renders out a HTML string\n *\n * @param {Array} images An array of image elements to process\n * @param {string} galleryId\n * @return {string}\n */ const $7289923abbc3a0b5$var$renderGallery = (images, galleryId)=>{\n    const renderedImages = [];\n    images.forEach((image, index)=>{\n        renderedImages.push($7289923abbc3a0b5$var$processImage(image, index));\n    });\n    return `    <ul data-gallery-id=\"${galleryId}\" class=\"gallery-list\">\n      ${renderedImages.join('')}\n    </ul>`;\n};\n/**\n * Render the overlay and inject the galleries into it\n *\n * @param {string} galleriesRendered\n * @param {boolean} showYoutube\n * @return {string}\n */ const $7289923abbc3a0b5$var$renderOverlay = (galleriesRendered)=>{\n    return `\n  <div id=\"simple-gallery\" \n    class=\"simple-gallery\">\n    ${galleriesRendered}\n    <a href=\"#\" class=\"simple-gallery-button simple-gallery-button-previous\">\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path id=\"Path\" class=\"simple-gallery-icon-stroke\" stroke-width=\"14\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M 66 8 L 24 50 L 66 92 L 66 92\"/>\n      </svg>\n    </a>\n    <a href=\"#\" class=\"simple-gallery-button simple-gallery-button-next\">\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path id=\"Path\" class=\"simple-gallery-icon-stroke\" stroke-width=\"14\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M 34 8 L 76 50 L 34 92 L 34 92\"/>\n      </svg>\n    </a>\n    <a href=\"#\" class=\"simple-gallery-button-close\">\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path id=\"Path\" class=\"simple-gallery-icon-stroke\" stroke-width=\"14\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M 20 20 L 50 50 L 20 80 L 20 80 M 80 20 L 50 50 L 80 80 L 80 80\"/>\n      </svg>\n    </a>\n    <div class=\"player-wrapper\">\n      <div class=\"ytplayer-embed-responsive\">\n        <div id=\"ytplayer\" class=\"ytplayer-iframe\"></div>\n      </div>\n    </div>\n  </div>`;\n};\n/**\n * Gallery Object Literal Template\n *\n * @todo remove not used\n */ const $7289923abbc3a0b5$var$gallery = {\n    galleryId: '',\n    images: [],\n    currentImage: 0,\n    modalImages: [],\n    totalImages: 0\n};\n/**\n * Initialise galleries and inject them into the page\n */ const $7289923abbc3a0b5$var$initGalleries = (selector)=>{\n    const galleries = document.querySelectorAll(selector);\n    const galleriesRendered = [];\n    /**\n   * Loop through the galleries and pass back a list\n   */ galleries.forEach((item)=>{\n        const id = item.id;\n        const g = Object.create($7289923abbc3a0b5$var$gallery);\n        g.images = item.querySelectorAll('img');\n        const rendered = $7289923abbc3a0b5$var$renderGallery(g.images, id);\n        galleriesRendered.push(rendered);\n    });\n    const galleryOverlayTemplate = $7289923abbc3a0b5$var$renderOverlay(galleriesRendered.join(''));\n    document.body.insertAdjacentHTML('beforeend', galleryOverlayTemplate);\n};\n/**\n * Process an image element and return a rendered image.\n * @param {HTMLElement} image - The image element to process.\n * @param {number} index - The index of the image element.\n * @returns {string} - Returns an HTML string.\n */ function $7289923abbc3a0b5$var$processImage(image, index) {\n    image.setAttribute('data-imagekey', index);\n    let youtubeId = image.getAttribute('data-sg-youtubeid');\n    const imgSrc = $7289923abbc3a0b5$var$getImageSource(image);\n    const caption = $7289923abbc3a0b5$var$getImageCaption(image);\n    return $7289923abbc3a0b5$var$renderImage(index, imgSrc, image.alt, caption, youtubeId);\n}\n/**\n * Retrieves the caption for a given image element.\n *\n * This function checks if the image element has a 'data-sg-desc' attribute.\n * If it does, it returns the value of that attribute. Otherwise, it returns\n * the value of the image's 'alt' attribute.\n *\n * @param {HTMLImageElement} image - The image element from which to retrieve the caption.\n * @param {string} caption - A fallback caption if no 'data-sg-desc' attribute is found.\n * @returns {string} The caption for the image.\n */ function $7289923abbc3a0b5$var$getImageCaption(image) {\n    if (image.getAttribute('data-sg-desc')) return image.getAttribute('data-sg-desc');\n    return image.alt;\n}\n/**\n * Retrieves the source for a given image element.\n *\n * This function checks if the image element has a 'data-sg-src' attribute.\n * If it does, it returns the value of that attribute. Otherwise, it returns\n * the value of the image's 'src' attribute.\n *\n * @param {HTMLImageElement} image - The image element from which to retrieve the source.\n * @returns {string} The source for the image.\n *\n */ function $7289923abbc3a0b5$var$getImageSource(image) {\n    if (image.getAttribute('data-sg-src')) return image.getAttribute('data-sg-src');\n    return image.src;\n}\n/**\n * Setup event listeners\n */ function $7289923abbc3a0b5$var$setup(selector) {\n    const overlay = document.getElementById('simple-gallery');\n    const images = document.querySelectorAll(`${selector} img`);\n    let currentImage = 0;\n    let currentGallery = null;\n    const modalImages = overlay.querySelectorAll('.gallery-list img');\n    let totalImages = 0;\n    let touchstartX = 0;\n    let touchendX = 0;\n    images.forEach(function(image) {\n        image.addEventListener('click', (e)=>{\n            e.preventDefault();\n            resetImages();\n            const el = image.closest(selector);\n            currentGallery = el.id;\n            const g = document.querySelectorAll(`[data-gallery-id=\"${currentGallery}\"] img`);\n            totalImages = g.length;\n            const imageKey = image.getAttribute('data-imagekey');\n            currentImage = imageKey;\n            switchImage(imageKey);\n        });\n    });\n    modalImages.forEach((image)=>{\n        image.addEventListener('mousedown', (event)=>{\n            event.preventDefault();\n            touchstartX = event['screenX'];\n        });\n        image.addEventListener('mouseup', (event)=>{\n            touchendX = event['screenX'];\n            if (touchendX > touchstartX + 50) imagePrevious();\n            else if (touchendX < touchstartX - 50) imageNext();\n        });\n        image.addEventListener('touchstart', (event)=>{\n            touchstartX = event.changedTouches[0]['screenX'];\n        });\n        image.addEventListener('touchend', (event)=>{\n            touchendX = event.changedTouches[0]['screenX'];\n            if (touchendX > touchstartX + 50) imagePrevious();\n            else if (touchendX < touchstartX - 50) imageNext();\n        });\n    });\n    overlay.addEventListener('click', (event)=>{\n        if (event.target === overlay) closeModal();\n    });\n    document.querySelector('.simple-gallery-button-close').addEventListener('click', (event)=>{\n        event.preventDefault();\n        closeModal();\n    });\n    document.addEventListener('keydown', (event)=>{\n        if (overlay.classList.contains('gallery-active')) switch(event.key){\n            case 'Escape':\n            case 'Esc':\n                closeModal();\n                break;\n            case 'ArrowRight':\n            case 'Right':\n                imageNext();\n                break;\n            case 'ArrowLeft':\n            case 'Left':\n                imagePrevious();\n                break;\n            default:\n                break;\n        }\n    });\n    /**\n   * Close the gallery modal\n   */ function closeModal() {\n        resetImages();\n        overlay.classList.remove('gallery-active');\n        document.body.style.overflow = 'auto';\n        let currentGallerySelector = `[data-gallery-id='${currentGallery}']`;\n        overlay.querySelectorAll(currentGallerySelector)[0].classList.remove('gallery-list--active');\n        currentGallery = null;\n    }\n    /**\n   * Move to next image\n   */ function imageNext() {\n        const i = parseInt(currentImage, 10) + 1;\n        currentImage = checkIndex(i);\n        switchImage(currentImage);\n    }\n    /**\n   * Move to previous image\n   */ function imagePrevious() {\n        const i = parseInt(currentImage, 10) - 1;\n        currentImage = checkIndex(i);\n        switchImage(currentImage, 'right');\n    }\n    /**\n   * Resets the classes for all images in the gallery modal, used for\n   * navigation purposes to ensure consistency of operation.\n   *\n   */ function resetImages() {\n        let player = window['player'];\n        const images = overlay.querySelectorAll('.gallery-list li');\n        images.forEach(function(i) {\n            i.classList.remove('image-active');\n            i.classList.remove('slide-in-from-right');\n            i.classList.remove('slide-in-from-left');\n        });\n        if (typeof player !== 'undefined') {\n            const playerElement = document.querySelector('#simple-gallery #ytplayer');\n            playerElement.parentNode.classList.remove('ytplayer-active');\n            playerElement.parentNode.parentNode.classList.remove('ytactive');\n            if (player.getIframe() !== null) player.destroy();\n        }\n    }\n    /**\n   * Event listener for gallery previous button\n   */ overlay.querySelector('.simple-gallery-button-previous').addEventListener('click', (event)=>{\n        event.preventDefault();\n        imagePrevious();\n    });\n    /**\n   * Event listener for gallery next button\n   */ overlay.querySelector('.simple-gallery-button-next').addEventListener('click', (event)=>{\n        event.preventDefault();\n        imageNext();\n    });\n    /**\n   * Switches the currently active image based on the\n   * @param {number} i index number\n   * @param {string} d direction\n   */ function switchImage(i, d) {\n        d = typeof d !== 'undefined' ? d : 'left';\n        resetImages();\n        const x = overlay.querySelector(`.gallery-list[data-gallery-id=\"${currentGallery}\"] [data-imagekey=\"${i}\"]`);\n        x.classList.add('image-active');\n        if (d === 'right') x.classList.add('slide-in-from-right');\n        else x.classList.add('slide-in-from-left');\n        overlay.classList.add('gallery-active');\n        document.body.style.overflow = 'hidden';\n        let currentGallerySelector = `[data-gallery-id='${currentGallery}']`;\n        overlay.querySelectorAll(currentGallerySelector)[0].classList.add('gallery-list--active');\n    }\n    /**\n   * Check if the index would be out of range and return either the first or\n   * last index of the image set depending at which end the use is navigating\n   * from.\n   *\n   * @return {number}\n   * @param {number} i\n   */ function checkIndex(i) {\n        if (i < 0) return totalImages - 1;\n        else if (i > totalImages - 1) return 0;\n        else return i;\n    }\n}\n/**\n * Youtube player setup\n */ function $7289923abbc3a0b5$var$youtubeSetup() {\n    const tag = document.createElement('script');\n    tag.id = 'iframe-api';\n    tag.src = 'https://www.youtube.com/iframe_api';\n    const firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n}\nwindow.onYouTubeIframeAPIReady = ()=>{\n    $7289923abbc3a0b5$var$addClickListeners();\n};\n/**\n * @param {event} event\n */ window.onPlayerReady = (event)=>{\n    event.target.playVideo();\n};\n/**\n * Add event listeners for images which has youtube id\n */ function $7289923abbc3a0b5$var$addClickListeners() {\n    const YT = window['YT'];\n    const onPlayerReady = window['onPlayerReady'];\n    const els = document.querySelectorAll('#simple-gallery [data-youtubeid]');\n    els.forEach(function(el) {\n        el.addEventListener('click', function(e) {\n            e.preventDefault();\n            const t = e.currentTarget;\n            const ytId = t.getAttribute('data-youtubeid');\n            if (ytId !== '') {\n                window['player'] = new YT.Player('ytplayer', {\n                    height: '390',\n                    width: '640',\n                    videoId: ytId,\n                    events: {\n                        onReady: onPlayerReady\n                    },\n                    playerVars: {\n                        rel: 0,\n                        autoplay: 1\n                    }\n                });\n                const playerElement = document.querySelector('#simple-gallery #ytplayer');\n                playerElement.parentNode.classList.add('ytplayer-active');\n                playerElement.parentNode.parentNode.classList.add('ytactive');\n                e.currentTarget.classList.remove('image-active');\n                e.currentTarget.classList.remove('slide-in-from-left');\n                e.currentTarget.classList.remove('slide-in-from-right');\n            }\n        });\n    });\n}\n/**\n * Polyfill for object-fit\n */ const $7289923abbc3a0b5$var$objectFitPolyfill = ()=>{\n    if ('objectFit' in document.documentElement.style === false) {\n        const images = document.querySelectorAll('.gallery img');\n        images.forEach(function(image) {\n            const imgSrc = image.src;\n            const parent = image.parentNode;\n            image.style.opacity = 0;\n            parent.style.backgroundImage = `url(\"${imgSrc}\")`;\n            parent.style.backgroundPosition = 'center center';\n            parent.style.backgroundSize = 'cover';\n        });\n    }\n};\n/**\n * Setup the gallery using the passed selector\n *\n * @param {string} selector\n */ const $7289923abbc3a0b5$var$simpleGallery = ({ selector: selector = '.gallery' } = {})=>{\n    const test = document.querySelectorAll(selector);\n    if (test.length > 0) {\n        $7289923abbc3a0b5$var$initGalleries(selector);\n        $7289923abbc3a0b5$var$setup(selector);\n        $7289923abbc3a0b5$var$youtubeSetup();\n        $7289923abbc3a0b5$var$objectFitPolyfill();\n    }\n};\nvar $7289923abbc3a0b5$export$2e2bcd8739ae039 = $7289923abbc3a0b5$var$simpleGallery;\n\n\n(0, $7289923abbc3a0b5$export$2e2bcd8739ae039)();\nwindow.simpleGallery = (0, $7289923abbc3a0b5$export$2e2bcd8739ae039);\n\n})();\n//# sourceMappingURL=gallery.js.map\n","import simpleGallery from './gallery.mjs';\nsimpleGallery();\nwindow.simpleGallery = simpleGallery;\n","/**\n * Renders an image using a template\n *\n * @param {number} imageIndex index to identify the image by\n * @param {string} imageUrl the url for the image\n * @param {string} imageAlt the alt attribute for the image\n * @param {string} imageCaption a caption to display under the image\n * @param {string} youtubeId optional youtube id\n * @return {string}\n */\nconst renderImage = (\n  imageIndex, imageUrl, imageAlt,\n  imageCaption, youtubeId = null) => {\n  let y = '';\n  let x = '';\n\n  /**\n   * If the image has a youtube id then we need to add some extra\n   * markup to the image\n   */\n  if (youtubeId !== null) {\n    y = `data-youtubeid=\"${youtubeId}\"`;\n    x = `<div class=\"simple-gallery-play-icon\">\n          <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path class=\"simple-gallery-play-icon-circle\" d=\"M 105 55 C 105 27.385765 82.614235 5 55 5 C 27.385763 5 5 27.385765 5 55 C 5 82.614235 27.385763 105 55 105 C 82.614235 105 105 82.614235 105 55 Z\"/>\n              <path class=\"simple-gallery-play-icon-triangle\" d=\"M 81.5 55.122868 L 41.5 32.028854 L 41.5 78.216881 Z\"/>\n          </svg>\n        </div>`;\n  }\n\n  return `\n    <li class=\"simple-gallery-item\" data-imagekey=\"${imageIndex}\" ${y}>\n      <figure>\n        <div class=\"simple-gallery-image-wrapper\">\n        <img src=\"${imageUrl}\" alt=\"${imageAlt}\">\n        ${x}\n        </div>\n        <figcaption>${imageCaption}</figcaption>\n      </figure>\n    </li>`;\n};\n\n/**\n * Takes and array of images and renders out a HTML string\n *\n * @param {Array} images An array of image elements to process\n * @param {string} galleryId\n * @return {string}\n */\nconst renderGallery = (images, galleryId) => {\n  const renderedImages = [];\n\n  images.forEach((image, index) => {\n    renderedImages.push(processImage(image, index));\n  });\n\n  return `    <ul data-gallery-id=\"${galleryId}\" class=\"gallery-list\">\n      ${renderedImages.join('')}\n    </ul>`;\n};\n\n/**\n * Render the overlay and inject the galleries into it\n *\n * @param {string} galleriesRendered\n * @param {boolean} showYoutube\n * @return {string}\n */\nconst renderOverlay = (galleriesRendered) => {\n  return `\n  <div id=\"simple-gallery\" \n    class=\"simple-gallery\">\n    ${galleriesRendered}\n    <a href=\"#\" class=\"simple-gallery-button simple-gallery-button-previous\">\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path id=\"Path\" class=\"simple-gallery-icon-stroke\" stroke-width=\"14\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M 66 8 L 24 50 L 66 92 L 66 92\"/>\n      </svg>\n    </a>\n    <a href=\"#\" class=\"simple-gallery-button simple-gallery-button-next\">\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path id=\"Path\" class=\"simple-gallery-icon-stroke\" stroke-width=\"14\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M 34 8 L 76 50 L 34 92 L 34 92\"/>\n      </svg>\n    </a>\n    <a href=\"#\" class=\"simple-gallery-button-close\">\n      <svg width=\"100\" height=\"100\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path id=\"Path\" class=\"simple-gallery-icon-stroke\" stroke-width=\"14\" stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M 20 20 L 50 50 L 20 80 L 20 80 M 80 20 L 50 50 L 80 80 L 80 80\"/>\n      </svg>\n    </a>\n    <div class=\"player-wrapper\">\n      <div class=\"ytplayer-embed-responsive\">\n        <div id=\"ytplayer\" class=\"ytplayer-iframe\"></div>\n      </div>\n    </div>\n  </div>`;\n};\n\n/**\n * Gallery Object Literal Template\n *\n * @todo remove not used\n */\nconst gallery = {\n  galleryId: '',\n  images: [],\n  currentImage: 0,\n  modalImages: [],\n  totalImages: 0,\n};\n\n/**\n * Initialise galleries and inject them into the page\n */\nconst initGalleries = (selector) => {\n  const galleries = document.querySelectorAll(selector);\n  const galleriesRendered = [];\n\n  /**\n   * Loop through the galleries and pass back a list\n   */\n  galleries.forEach((item) => {\n    const id = item.id;\n    const g = Object.create(gallery);\n    g.images = item.querySelectorAll('img');\n    const rendered = renderGallery(g.images, id);\n    galleriesRendered.push(rendered);\n  });\n\n  const galleryOverlayTemplate = renderOverlay(galleriesRendered.join(''));\n\n  document.body.insertAdjacentHTML(\n    'beforeend', galleryOverlayTemplate,\n  );\n};\n\n/**\n * Process an image element and return a rendered image.\n * @param {HTMLElement} image - The image element to process.\n * @param {number} index - The index of the image element.\n * @returns {string} - Returns an HTML string.\n */\nfunction processImage(image, index) {\n  image.setAttribute('data-imagekey', index);\n  let youtubeId = image.getAttribute('data-sg-youtubeid');\n\n  const imgSrc = getImageSource(image);\n  const caption = getImageCaption(image);\n\n  return renderImage(index, imgSrc, image.alt, caption, youtubeId);\n}\n\n/**\n * Retrieves the caption for a given image element.\n *\n * This function checks if the image element has a 'data-sg-desc' attribute.\n * If it does, it returns the value of that attribute. Otherwise, it returns\n * the value of the image's 'alt' attribute.\n *\n * @param {HTMLImageElement} image - The image element from which to retrieve the caption.\n * @param {string} caption - A fallback caption if no 'data-sg-desc' attribute is found.\n * @returns {string} The caption for the image.\n */\nfunction getImageCaption(image) {\n  if (image.getAttribute('data-sg-desc')) {\n    return image.getAttribute('data-sg-desc');\n  }\n  return image.alt;\n}\n\n/**\n * Retrieves the source for a given image element.\n *\n * This function checks if the image element has a 'data-sg-src' attribute.\n * If it does, it returns the value of that attribute. Otherwise, it returns\n * the value of the image's 'src' attribute.\n *\n * @param {HTMLImageElement} image - The image element from which to retrieve the source.\n * @returns {string} The source for the image.\n *\n */\nfunction getImageSource(image) {\n  if (image.getAttribute('data-sg-src')) {\n    return image.getAttribute('data-sg-src');\n  }\n  return image.src;\n}\n\n/**\n * Setup event listeners\n */\nfunction setup(selector) {\n  const overlay = document.getElementById('simple-gallery');\n\n  const images = document.querySelectorAll(`${selector} img`);\n  let currentImage = 0;\n\n  let currentGallery = null;\n  const modalImages = overlay.querySelectorAll('.gallery-list img');\n  let totalImages = 0;\n\n  let touchstartX = 0;\n  let touchendX = 0;\n\n  images.forEach(function (image) {\n    image.addEventListener('click', (e) => {\n      e.preventDefault();\n      resetImages();\n\n      const el = image.closest(selector);\n\n      currentGallery = el.id;\n      const g = document.querySelectorAll(\n        `[data-gallery-id=\"${currentGallery}\"] img`);\n\n      totalImages = g.length;\n\n      const imageKey = image.getAttribute('data-imagekey');\n      currentImage = imageKey;\n      switchImage(imageKey);\n    });\n  });\n\n  modalImages.forEach((image) => {\n    image.addEventListener('mousedown', (event) => {\n      event.preventDefault();\n      touchstartX = event['screenX'];\n    });\n\n    image.addEventListener('mouseup', (event) => {\n      touchendX = event['screenX'];\n\n      if (touchendX > touchstartX + 50) {\n        imagePrevious();\n      }\n      else if (touchendX < touchstartX - 50) {\n        imageNext();\n      }\n    });\n\n    image.addEventListener('touchstart', (event) => {\n      touchstartX = event.changedTouches[0]['screenX'];\n    });\n\n    image.addEventListener('touchend', (event) => {\n      touchendX = event.changedTouches[0]['screenX'];\n\n      if (touchendX > touchstartX + 50) {\n        imagePrevious();\n      }\n      else if (touchendX < touchstartX - 50) {\n        imageNext();\n      }\n    });\n  });\n\n  overlay.addEventListener('click', (event) => {\n    if (event.target === overlay) {\n      closeModal();\n    }\n  });\n\n  document.querySelector('.simple-gallery-button-close')\n    .addEventListener('click', (event) => {\n      event.preventDefault();\n      closeModal();\n    });\n\n  document.addEventListener('keydown', (event) => {\n    if (overlay.classList.contains('gallery-active')) {\n      switch (event.key) {\n        case 'Escape':\n        case 'Esc':\n          closeModal();\n          break;\n        case 'ArrowRight':\n        case 'Right':\n          imageNext();\n          break;\n        case 'ArrowLeft':\n        case 'Left':\n          imagePrevious();\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  /**\n   * Close the gallery modal\n   */\n  function closeModal() {\n    resetImages();\n    overlay.classList.remove('gallery-active');\n    document.body.style.overflow = 'auto';\n\n    let currentGallerySelector = `[data-gallery-id='${currentGallery}']`;\n    overlay.querySelectorAll(currentGallerySelector)[0]\n      .classList.remove('gallery-list--active');\n\n    currentGallery = null;\n  }\n\n  /**\n   * Move to next image\n   */\n  function imageNext() {\n    const i = parseInt(currentImage, 10) + 1;\n    currentImage = checkIndex(i);\n    switchImage(currentImage);\n  }\n\n  /**\n   * Move to previous image\n   */\n  function imagePrevious() {\n    const i = parseInt(currentImage, 10) - 1;\n    currentImage = checkIndex(i);\n    switchImage(currentImage, 'right');\n  }\n\n  /**\n   * Resets the classes for all images in the gallery modal, used for\n   * navigation purposes to ensure consistency of operation.\n   *\n   */\n  function resetImages() {\n    let player = window['player'];\n    const images = overlay.querySelectorAll('.gallery-list li');\n    images.forEach(function (i) {\n      i.classList.remove('image-active');\n      i.classList.remove('slide-in-from-right');\n      i.classList.remove('slide-in-from-left');\n    });\n\n    if (typeof player !== 'undefined') {\n      const playerElement = document.querySelector(\n        '#simple-gallery #ytplayer');\n\n      playerElement.parentNode.classList.remove('ytplayer-active');\n      playerElement.parentNode.parentNode.classList.remove('ytactive');\n      if (player.getIframe() !== null) {\n        player.destroy();\n      }\n    }\n  }\n\n  /**\n   * Event listener for gallery previous button\n   */\n  overlay.querySelector('.simple-gallery-button-previous')\n    .addEventListener('click', (event) => {\n      event.preventDefault();\n      imagePrevious();\n    });\n\n  /**\n   * Event listener for gallery next button\n   */\n  overlay.querySelector('.simple-gallery-button-next')\n    .addEventListener('click', (event) => {\n      event.preventDefault();\n      imageNext();\n    });\n\n  /**\n   * Switches the currently active image based on the\n   * @param {number} i index number\n   * @param {string} d direction\n   */\n  function switchImage(i, d) {\n    d = (typeof d !== 'undefined') ? d : 'left';\n\n    resetImages();\n\n    const x = overlay.querySelector(\n      `.gallery-list[data-gallery-id=\"${currentGallery}\"] [data-imagekey=\"${i}\"]`,\n    );\n\n    x.classList.add('image-active');\n\n    if (d === 'right') {\n      x.classList.add('slide-in-from-right');\n    }\n    else {\n      x.classList.add('slide-in-from-left');\n    }\n\n    overlay.classList.add('gallery-active');\n    document.body.style.overflow = 'hidden';\n\n    let currentGallerySelector = `[data-gallery-id='${currentGallery}']`;\n    overlay.querySelectorAll(currentGallerySelector)[0]\n      .classList.add('gallery-list--active');\n  }\n\n  /**\n   * Check if the index would be out of range and return either the first or\n   * last index of the image set depending at which end the use is navigating\n   * from.\n   *\n   * @return {number}\n   * @param {number} i\n   */\n  function checkIndex(i) {\n    if (i < 0) {\n      return totalImages - 1;\n    }\n    else if (i > totalImages - 1) {\n      return 0;\n    }\n    else {\n      return i;\n    }\n  }\n};\n\n/**\n * Youtube player setup\n */\nfunction youtubeSetup() {\n  const tag = document.createElement('script');\n  tag.id = 'iframe-api';\n  tag.src = 'https://www.youtube.com/iframe_api';\n  const firstScriptTag = document.getElementsByTagName('script')[0];\n  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n}\n\nwindow.onYouTubeIframeAPIReady = () => {\n  addClickListeners();\n};\n\n/**\n * @param {event} event\n */\nwindow.onPlayerReady = (event) => {\n  event.target.playVideo();\n};\n\n/**\n * Add event listeners for images which has youtube id\n */\nfunction addClickListeners() {\n  const YT = window['YT'];\n  const onPlayerReady = window['onPlayerReady'];\n  const els = document.querySelectorAll(\n    '#simple-gallery [data-youtubeid]');\n  els.forEach(function (el) {\n    el.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      const t = e.currentTarget;\n      const ytId = t.getAttribute('data-youtubeid');\n\n      if (ytId !== '') {\n        window['player'] = new YT.Player('ytplayer', {\n          height: '390',\n          width: '640',\n          videoId: ytId,\n          events: {\n            onReady: onPlayerReady,\n          },\n          playerVars: {\n            rel: 0,\n            autoplay: 1,\n          },\n        });\n\n        const playerElement = document.querySelector(\n          '#simple-gallery #ytplayer');\n\n        playerElement.parentNode.classList.add('ytplayer-active');\n        playerElement.parentNode.parentNode.classList.add('ytactive');\n\n        e.currentTarget.classList.remove('image-active');\n        e.currentTarget.classList.remove('slide-in-from-left');\n        e.currentTarget.classList.remove('slide-in-from-right');\n      }\n    });\n  });\n}\n\n/**\n * Polyfill for object-fit\n */\nconst objectFitPolyfill = () => {\n  if ('objectFit' in document.documentElement.style === false) {\n    const images = document.querySelectorAll('.gallery img');\n    images.forEach(function (image) {\n      const imgSrc = image.src;\n      const parent = image.parentNode;\n\n      image.style.opacity = 0;\n      parent.style.backgroundImage = `url(\"${imgSrc}\")`;\n      parent.style.backgroundPosition = 'center center';\n      parent.style.backgroundSize = 'cover';\n    });\n  }\n};\n\n/**\n * Setup the gallery using the passed selector\n *\n * @param {string} selector\n */\nconst simpleGallery = ({ selector = '.gallery' } = {}) => {\n  const test = document.querySelectorAll(selector);\n  if (test.length > 0) {\n    initGalleries(selector);\n    setup(selector);\n    youtubeSetup();\n    objectFitPolyfill();\n  };\n};\n\nexport default simpleGallery;\n"],"names":["$7289923abbc3a0b5$var$renderImage","imageIndex","imageUrl","imageAlt","imageCaption","youtubeId","y","x","$7289923abbc3a0b5$var$renderGallery","images","galleryId","renderedImages","forEach","image","index","push","$7289923abbc3a0b5$var$processImage","setAttribute","getAttribute","imgSrc","src","caption","alt","join","$7289923abbc3a0b5$var$renderOverlay","galleriesRendered","$7289923abbc3a0b5$var$gallery","currentImage","modalImages","totalImages","$7289923abbc3a0b5$var$initGalleries","selector","galleries","document","querySelectorAll","item","id","g","Object","create","rendered","galleryOverlayTemplate","body","insertAdjacentHTML","window","onYouTubeIframeAPIReady","$7289923abbc3a0b5$var$addClickListeners","YT","onPlayerReady","els","el","addEventListener","e","preventDefault","ytId","t","currentTarget","Player","height","width","videoId","events","onReady","playerVars","rel","autoplay","playerElement","querySelector","parentNode","classList","add","remove","event","target","playVideo","$7289923abbc3a0b5$var$objectFitPolyfill","documentElement","style","parent","opacity","backgroundImage","backgroundPosition","backgroundSize","$7289923abbc3a0b5$export$2e2bcd8739ae039","test","length","$7289923abbc3a0b5$var$setup","overlay","getElementById","currentGallery","touchstartX","touchendX","closeModal","resetImages","overflow","currentGallerySelector","imageNext","switchImage","checkIndex","parseInt","imagePrevious","player","i","getIframe","destroy","d","closest","imageKey","changedTouches","contains","key","$7289923abbc3a0b5$var$youtubeSetup","tag","createElement","firstScriptTag","getElementsByTagName","insertBefore","simpleGallery"],"version":3,"file":"gallery.js.map"}